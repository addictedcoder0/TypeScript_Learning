!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class n{constructor(e,t,r,n){this.whereToRenderTemplateElement=document.getElementById(e),this.whereToRenderElement=document.getElementById(t);const i=document.importNode(this.whereToRenderTemplateElement.content,!0);this.whatToRenderElement=i.firstElementChild,n&&(this.whatToRenderElement.id=n),this.attach(r)}attach(e){this.whereToRenderElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.whatToRenderElement)}}class i{constructor(e){this.value=e}static createValidator(e){return new i(e)}isRequired(e){return this.required=e,this}withMinLength(e){return this.minLength=e,this}withMaxLength(e){return this.maxLength=e,this}withMinValue(e){return this.min=e,this}withMaxValue(e){return this.max=e,this}validate(){let e=!0;return this.required&&(e=e&&0!==this.value.toString().trim().length),this.minLength&&(e=e&&this.value.toString().trim().length>=this.minLength),this.maxLength&&(e=e&&this.value.toString().trim().length<=this.maxLength),"number"==typeof this.value&&(this.min&&(e=e&&+this.value>=this.min),this.max&&(e=e&&+this.value<=this.max)),e}}function s(e,t,r){const n=r.value;return{configurable:!0,get(){return n.bind(this)}}}var o=function(e,t,r,n){var i,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,r,o):i(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o};class a extends n{constructor(e,t){super("single-project",e,!1,t.getProjectId().toString()),this.project=t,this.configure(),this.renderContent()}configure(){this.whatToRenderElement.addEventListener("dragstart",this.dragStartHandler),this.whatToRenderElement.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.whatToRenderElement.querySelector("h2").textContent=this.project.getProjectTitle(),this.whatToRenderElement.querySelector("h3").textContent=this.project.getNumberOfPeople().toString()+" developer(s)",this.whatToRenderElement.querySelector("p").textContent=this.project.getProjectDescription()}dragStartHandler(e){console.log(e),e.dataTransfer.setData("text/plain",this.project.getProjectId().toString()),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){console.log(e)}}o([s],a.prototype,"dragStartHandler",null),o([s],a.prototype,"dragEndHandler",null);class l{constructor(e,t,r,n,i){this.projectId=e,this.projectTitle=t,this.projectDesc=r,this.numOfPeople=n,this.hasFinished=i}getProjectId(){return this.projectId}getProjectTitle(){return this.projectTitle}getProjectDescription(){return this.projectDesc}getNumberOfPeople(){return this.numOfPeople}hasProjectFinished(){return this.hasFinished}setFinishedState(e){this.hasFinished=e}}class c{constructor(){this.projects=[],this.listeners=[]}static getInstance(){return this.projectState||(this.projectState=new c),this.projectState}addListener(e){this.listeners.push(e)}addProject(e,t,r){var n;const i=new l(Math.random(),e,t,r,!1);null===(n=this.projects)||void 0===n||n.push(i),this.updateListeners()}moveProject(e,t){const r=this.projects.find(t=>t.getProjectId().toString()===e);r&&r.hasProjectFinished()!==t&&r.setFinishedState(t),this.updateListeners()}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}var d=function(e,t,r,n){var i,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,r,o):i(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o};class h extends n{constructor(e){super("project-list","app",!1,e+"-projects"),this.typeOfProject=e,this.assignedProjects=[],this.projectState=c.getInstance(),this.configure(),this.renderContent()}renderProjects(){document.getElementById(this.typeOfProject+"-projects-list").innerHTML="";for(const e of this.assignedProjects)new a(this.whatToRenderElement.querySelector("ul").id,e)}configure(){this.whatToRenderElement.addEventListener("dragover",this.dragOverHandler),this.whatToRenderElement.addEventListener("drop",this.dropHandler),this.whatToRenderElement.addEventListener("dragleave",this.dragLeaveHandler),this.projectState.addListener(e=>{this.assignedProjects=e.filter(e=>"active"===this.typeOfProject?!e.hasProjectFinished():e.hasProjectFinished()),this.renderProjects()})}renderContent(){const e=this.typeOfProject+"-projects-list";this.whatToRenderElement.querySelector("ul").id=e,this.whatToRenderElement.querySelector("h2").textContent=this.typeOfProject.toUpperCase()+" PROJECTS"}dropHandler(e){e.preventDefault();const t=e.dataTransfer.getData("text/plain");console.log(),this.projectState.moveProject(t,"active"!==this.typeOfProject)}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.whatToRenderElement.querySelector("ul").classList.add("droppable"))}dragLeaveHandler(e){this.whatToRenderElement.querySelector("ul").classList.remove("droppable")}}d([s],h.prototype,"dropHandler",null),d([s],h.prototype,"dragOverHandler",null),d([s],h.prototype,"dragLeaveHandler",null);var u=function(e,t,r,n){var i,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,r,o):i(t,r))||o);return s>3&&o&&Object.defineProperty(t,r,o),o};class p extends n{constructor(){super("project-input","app",!0,"user-input"),this.titleInputEle=this.whatToRenderElement.querySelector("#title"),this.descriptionInputEle=this.whatToRenderElement.querySelector("#description"),this.peopleInputEle=this.whatToRenderElement.querySelector("#people"),this.projectState=c.getInstance(),this.configure()}gatheruserInput(){const e=this.titleInputEle.value,t=this.descriptionInputEle.value,r=this.peopleInputEle.valueAsNumber,n=i.createValidator(e).isRequired(!0).validate(),s=i.createValidator(t).isRequired(!0).withMinLength(5).validate(),o=i.createValidator(r).isRequired(!0).withMinValue(1).withMaxValue(5).validate();return n&&s&&o?[e,t,r]:(console.log("Invalid Input being submitted , Please Try Again"),void alert("Invalid Input being submitted , Please Try Again"))}clearInput(){this.titleInputEle.value="",this.descriptionInputEle.value="",this.peopleInputEle.value=""}submitHandler(e){e.preventDefault();const t=this.gatheruserInput();if(Array.isArray(t)){const[e,r,n]=t;this.projectState.addProject(e,r,n)}this.clearInput(),console.log(this.titleInputEle.value)}configure(){this.whatToRenderElement.addEventListener("submit",this.submitHandler)}renderContent(){}}u([s],p.prototype,"gatheruserInput",null),u([s],p.prototype,"submitHandler",null);new p,new h("active"),new h("finished");console.log("%%%%%%%%*******.    (((())))......   "),console.log("dchsdkjsdckjsd")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,